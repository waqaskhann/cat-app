[{"/Users/waqaskhan/Sites/cat-app/src/index.js":"1","/Users/waqaskhan/Sites/cat-app/src/App.js":"2","/Users/waqaskhan/Sites/cat-app/src/reportWebVitals.js":"3","/Users/waqaskhan/Sites/cat-app/src/pages/Homepage.js":"4","/Users/waqaskhan/Sites/cat-app/src/pages/CatSinglePage.js":"5"},{"size":536,"mtime":1681759400964,"results":"6","hashOfConfig":"7"},{"size":832,"mtime":1681763630834,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1681645059729,"results":"9","hashOfConfig":"7"},{"size":3357,"mtime":1681763709847,"results":"10","hashOfConfig":"7"},{"size":1631,"mtime":1681763814602,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"g3zj9o",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/waqaskhan/Sites/cat-app/src/index.js",[],[],[],"/Users/waqaskhan/Sites/cat-app/src/App.js",[],[],"/Users/waqaskhan/Sites/cat-app/src/reportWebVitals.js",[],[],"/Users/waqaskhan/Sites/cat-app/src/pages/Homepage.js",["30","31"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { AppContext } from '../App';\nimport './Homepage.scss';\n\nconst Homepage = () => {\n  const { breed, setBreed } = useContext(AppContext);\n  const { lastVisitedWasSingle, setLastVisitedWasSingle } = useContext(AppContext);\n  const { cats, setCats } = useContext(AppContext);\n  const [breeds, setBreeds] = useState([]);\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadedCats, setLoadedCats] = useState(0);\n\n  useEffect(() => {\n    // Fetch all available breeds to populate select\n    const fetchBreeds = async () => {\n      try {\n        const response = await axios.get('https://api.thecatapi.com/v1/breeds');\n        setBreeds(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchBreeds();\n    setLastVisitedWasSingle(false)\n  }, []);\n\n\n  useEffect(() => {\n    // Fetch cats based on breed and page number\n    const fetchCats = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await axios.get(`https://api.thecatapi.com/v1/images/search?breed_id=${breed}&limit=10&page=${page}`);\n        const newCats = response.data.filter(cat => !cats.some(existingCat => existingCat.id === cat.id)); // Filter out duplicates\n        setCats(prevCats => [...prevCats, ...newCats]);\n        setLoadedCats(prevLoadedCats => prevLoadedCats + newCats.length);\n        setIsLoading(false);\n      } catch (error) {\n        alert(\"Apologies but we could not load new cats for you at this time! Miau!\")        \n        setIsLoading(false);\n      }\n    };\n\n    // Only fetch cats if breed is selected\n    if(breed) {\n      fetchCats();\n    } else if (breed && lastVisitedWasSingle) {\n\n    } else {\n      setCats([]);\n      setPage(1);\n      setLoadedCats(0);\n    }\n    }, [breed,page]);\n\n  const renderCats = () => {\n    if (!breed) {\n      return <div>Please select a breed.</div>;\n    }\n\n    if (isLoading) {\n      return <div>Loading cats...</div>;\n    }\n\n    if (cats.length === 0) {\n      return <div>No cats found for the selected breed.</div>;\n    }\n\n    return cats.map(cat => (\n      <div key={cat.id} className=\"card\">\n        <figure className=\"card__img-wrapper\">\n          <img src={cat.url} alt={`Cat ${cat.id}`} className=\"card__img\"/>\n        </figure>\n        <Link to={`/cat-app/${cat.id}`} className=\"card__cta\">View details</Link>\n      </div>\n    ));\n  };\n\n  const loadMoreCats = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  const allCatsLoaded = loadedCats < page * 10;\n\n  const handleBreedChange = (e) => {\n    setBreed(e.target.value);\n    setCats([]);\n    setPage(1);\n    setLoadedCats(0);\n  };\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Cat browser</h1>\n      <select value={breed} onChange={handleBreedChange}>\n        <option value=\"\">Select Breed</option>\n        {breeds.map(breed => (\n          <option key={breed.id} value={breed.id}>{breed.name}</option>\n        ))}\n      </select>\n      <div className=\"cards\">\n        {renderCats()}\n      </div>\n      {!allCatsLoaded &&\n        <button onClick={loadMoreCats} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load More'}\n        </button>\n      }\n    </div>\n  );\n};\n\nexport default Homepage;","/Users/waqaskhan/Sites/cat-app/src/pages/CatSinglePage.js",["32","33"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { AppContext } from '../App';\nimport './CatSinglePage.scss'\n\nconst CatSinglePage = () => {\n  const { lastVisitedWasSingle, setLastVisitedWasSingle } = useContext(AppContext);\n  const { catId } = useParams();\n  const [cat, setCat] = useState(null);\n\n  useEffect(() => {\n    // Fetch data based on cat ID\n    const fetchCat = async () => {\n        try {\n        const response = await axios.get(`https://api.thecatapi.com/v1/images/${catId}`);\n        setCat(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    \n    fetchCat();\n\n    setLastVisitedWasSingle(true)\n  }, [catId]);\n\n  // Render cat data\n  const renderCat = () => {\n    if (!cat) {\n      return <div>Loading cat...</div>;\n    }\n\n    return (\n      <div className=\"content-wrapper\">\n        <Link to={`/cat-app`} className=\"back-btn\">Back to Homepage</Link>\n        <div className=\"cat\">\n          <figure className=\"cat__img-wrapper\">\n            <img className=\"cat__img\" src={cat.url} alt={`Cat ${cat.id}`} width=\"300\" height=\"200\" />\n          </figure>\n          <div className=\"cat__info\">\n            <h1>Breed: {cat.breeds[0].name}</h1>\n            <p className=\"cat__origin\">Origin: {cat.breeds[0].origin}</p>\n            <p className=\"cat__temperament\">{cat.breeds[0].temperament}</p>\n            <p className=\"cat__description\">{cat.breeds[0].description}</p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return renderCat();\n};\n\nexport default CatSinglePage;\n",{"ruleId":"34","severity":1,"message":"35","line":29,"column":6,"nodeType":"36","endLine":29,"endColumn":8,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":59,"column":8,"nodeType":"36","endLine":59,"endColumn":20,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":8,"column":11,"nodeType":"42","messageId":"43","endLine":8,"endColumn":31},{"ruleId":"34","severity":1,"message":"35","line":26,"column":6,"nodeType":"36","endLine":26,"endColumn":13,"suggestions":"44"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLastVisitedWasSingle'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has missing dependencies: 'cats', 'lastVisitedWasSingle', and 'setCats'. Either include them or remove the dependency array.",["46"],"no-unused-vars","'lastVisitedWasSingle' is assigned a value but never used.","Identifier","unusedVar",["47"],{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [setLastVisitedWasSingle]",{"range":"54","text":"55"},"Update the dependencies array to be: [breed, cats, lastVisitedWasSingle, page, setCats]",{"range":"56","text":"57"},"Update the dependencies array to be: [catId, setLastVisitedWasSingle]",{"range":"58","text":"59"},[965,967],"[setLastVisitedWasSingle]",[1913,1925],"[breed, cats, lastVisitedWasSingle, page, setCats]",[753,760],"[catId, setLastVisitedWasSingle]"]